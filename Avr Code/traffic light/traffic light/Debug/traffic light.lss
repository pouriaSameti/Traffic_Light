
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fa  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cc  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z12conversionA0v>:
	int firstPart = (int)ADCL;
	int secondPart = (int)ADCH*256;
	
	int result = secondPart + firstPart;
	return (result);
}
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
  70:	36 9a       	sbi	0x06, 6	; 6
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <_Z12conversionA0v+0x8>
  78:	00 00       	nop
  7a:	24 b1       	in	r18, 0x04	; 4
  7c:	85 b1       	in	r24, 0x05	; 5
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	98 2f       	mov	r25, r24
  82:	88 27       	eor	r24, r24
  84:	82 0f       	add	r24, r18
  86:	91 1d       	adc	r25, r1
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	
	DDRC = 0x01;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	84 bb       	out	0x14, r24	; 20
	
	DDRA = 0x00;
  8e:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;
  90:	87 e8       	ldi	r24, 0x87	; 135
  92:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	
	while (1)
	{

		int value = conversionA0();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <_Z12conversionA0v>
		
		if (value > 512)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	92 40       	sbci	r25, 0x02	; 2
  a0:	14 f0       	brlt	.+4      	; 0xa6 <main+0x1c>
			PORTC |= 0x01;
  a2:	a8 9a       	sbi	0x15, 0	; 21
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <main+0xe>
		else
			PORTC = 0x00;
  a6:	15 ba       	out	0x15, r1	; 21
  a8:	f7 cf       	rjmp	.-18     	; 0x98 <main+0xe>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
